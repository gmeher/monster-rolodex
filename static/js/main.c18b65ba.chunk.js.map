{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","state","img","fetch","this","monster","id","then","data","setState","className","src","alt","name","email","React","Component","CardList","monsters","map","key","SearchBox","class","type","onChange","handleChange","placeholder","App","handleSearchChange","e","console","log","target","value","newMonsters","originalMonsters","filter","toLowerCase","includes","response","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uVAGaA,G,kBAAb,YACI,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,IAAK,0BAHK,EADtB,iFAOwB,IAAD,OACfC,MAAM,wBAAD,OAAyBC,KAAKJ,MAAMK,QAAQC,GAAK,KACrDC,KAAK,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAACP,IAAI,wBAAD,OAA0B,EAAKF,MAAMK,QAAQC,UATrF,+BAYQ,OACI,yBAAKI,UAAY,4CACb,yBAAKA,UAAY,wBACb,yBAAKC,IAAKP,KAAKH,MAAMC,IAAKU,IAAI,KAC9B,gCAAMR,KAAKJ,MAAMK,QAAQQ,KAAzB,MACA,2BAAIT,KAAKJ,MAAMK,QAAQS,aAjB3C,GAA0BC,IAAMC,YCEnBC,EAAW,SAACjB,GACrB,OACI,yBAAKU,UAAY,iCACb,yBAAKA,UAAY,OAETV,EAAMkB,SAASC,IAAI,SAAAd,GACnB,OAAQ,kBAAC,EAAD,CAAMe,IAAOf,EAAQC,GAAID,QAAWA,SCRnDgB,G,MAAY,SAACrB,GACtB,OACI,yBAAKsB,MAAM,wBACP,2BAAOC,KAAO,SAASC,SAAYxB,EAAMyB,aAAcC,YAAY,2BCoEhEC,E,YApEb,WAAY3B,GAAO,IAAD,8BAChB,4CAAMA,KAoCR4B,mBAAqB,SAACC,GACpBC,QAAQC,IAAIF,EAAEG,OAAOC,OAErB,IAAIC,EAAc,EAAKjC,MAAMkC,iBAAiBC,OAAO,SAAA/B,GAAO,OAAIA,EAAQQ,KAAKwB,cAAcC,SAAST,EAAEG,OAAOC,MAAMI,iBAEnH,EAAK5B,SAAS,CAACS,SAAUgB,KAxCzB,EAAKjC,MAAS,CAEZkC,iBAAkB,GAElBjB,SAAW,CACT,CACEZ,GAAI,EACJO,KAAM,oBAER,CACEP,GAAI,EACJO,KAAM,mBAER,CACEP,GAAI,EACJO,KAAM,mBAER,CACEP,GAAI,EACJO,KAAM,oBArBI,E,iFA4BG,IAAD,OAClBV,MAAM,8CACLI,KAAK,SAAAgC,GAAQ,OAAIA,EAASC,SAC1BjC,KAAK,SAAAiC,GAAI,OAAI,EAAK/B,SAAS,CAC1BS,SAAWsB,EACXL,iBAAkBK,Q,+BAgBpB,OAEE,yBAAK9B,UAAU,OAEb,wBAAIA,UAAY,cAAhB,sBACA,kBAAC,EAAD,CAAWe,aAAgBrB,KAAKwB,qBAGhC,kBAAC,EAAD,CAAUV,SAAYd,KAAKH,MAAMiB,UAAjC,U,GA1DUH,IAAMC,WCOJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC,iB","file":"static/js/main.c18b65ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport class Card extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            img: \"https://robohash.org/1\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch(`https://robohash.org/${this.props.monster.id + 10 }`)\r\n        .then(data => this.setState({img: `https://robohash.org/${this.props.monster.id}` }))\r\n    }\r\n    render(){\r\n        return(\r\n            <div className = \"monster-card col-sm-12 col-md-4 col-lg-3\"> \r\n                <div className = \"col-sm-12 inner-card\">\r\n                    <img src={this.state.img} alt=\"\"/> \r\n                    <h5> {this.props.monster.name}  </h5>\r\n                    <p>{this.props.monster.email}</p>\r\n\r\n                </div>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\n\r\nexport const CardList = (props) => {\r\n    return(\r\n        <div className = \"card-list-container container\">\r\n            <div className = \"row\">\r\n                {\r\n                    props.monsters.map(monster => {\r\n                    return (<Card key = {monster.id} monster = {monster}/>)\r\n                    })\r\n                }\r\n            </div>\r\n           \r\n           \r\n        </div>\r\n     \r\n    )\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props)=>{\r\n    return (\r\n        <div class=\"search-box-container\">\r\n            <input type = \"search\" onChange = {props.handleChange} placeholder=\"search your monster\"></input>\r\n        </div>\r\n        \r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { CardList } from './Components/card-list/card-list.component';\nimport { SearchBox } from './Components/search-box/search-box.component';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state  = {\n\n      originalMonsters: [],\n\n      monsters : [\n        {\n          id: 1,\n          name: \"adfadszbbnfa asd\"\n        },\n        {\n          id: 2,\n          name: \"adadgfadsfa asd\"\n        },\n        {\n          id: 3,\n          name: \"adfaasfdsfa asd\"\n        },\n        {\n          id: 4,\n          name: \"adfadsdsfa asd\"\n        },\n      ]\n    }\n  }\n\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(json => this.setState({\n      monsters : json,\n      originalMonsters: json\n    }))\n  }\n\n  handleSearchChange = (e)=>{\n    console.log(e.target.value);\n\n    var newMonsters = this.state.originalMonsters.filter(monster => monster.name.toLowerCase().includes(e.target.value.toLowerCase()))\n\n    this.setState({monsters: newMonsters});\n  }\n\n\n\n  render(){\n\n    return(\n\n      <div className=\"App\">\n\n        <h1 className = \"App-header\"> Monster- Rolodex </h1>\n        <SearchBox handleChange = {this.handleSearchChange}></SearchBox>\n        \n\n        <CardList monsters = {this.state.monsters} > </CardList>\n      </div>\n\n\n    )\n     \n    \n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}